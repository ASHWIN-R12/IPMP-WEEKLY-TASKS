class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int partition(int nums[],int low,int high)
    {
        int pivot=nums[low];
        int i=low;
        int j=high;
        while(i<j)
        {
            while(i<=high-1 && nums[i]<=pivot)
            {
                i++;
            }
            while(j>=low && nums[j]>pivot)
            {
                j--;
            }
            if(i<j)
            {
                swap(nums[i],nums[j]);
            }
        }
        swap(nums[low],nums[j]);
        return j;
    }
    int quick_select(int nums[],int low,int high,int k)
    {
            if(low==high)
                return low;
            int part=partition(nums,low,high);
            if(part==k)
                return part;
            else if(part>k)
                return quick_select(nums,low,part-1,k);
            else
                return quick_select(nums,part+1,high,k);
        
    }
    int kthSmallest(int arr[], int l, int r, int k) {
        
        k=k-1;
       
        
        int index=quick_select(arr,l,r,k);
        return arr[index];
        
    }
};
