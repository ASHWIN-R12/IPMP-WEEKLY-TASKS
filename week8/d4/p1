class LRUCache {
public:
    class node
    {
        public:
            int key;
            int val;
            node* next;
            node* prev;

            node(int _key,int _val)
            {
                key=_key;
                val=_val;
            }

    };

    
    int cap;
    unordered_map<int,node*> m;
    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);

    void addnode(node* temp)
    {
        temp->next=head->next;
        head->next=temp;
        temp->prev=head;
        temp->next->prev=temp;

    }

    void deletenode(node* temp)
    {
        node* delprev=temp->prev;
        node* delnext=temp->next;
        delprev->next=delnext;
        delnext->prev=delprev;
        
    }
    LRUCache(int capacity) {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    
    int get(int key) {
        if(m.find(key)!=m.end())
        {
            node* ans=m[key];
            int res=ans->val;
            m.erase(key);
            deletenode(ans);
            addnode(ans);
            m[key]=head->next;
            return res;

        }
        return -1;
    }
    
    void put(int key, int value) {
        if(m.find(key)!=m.end())
        {
            node* extra=m[key];
            deletenode(extra);
            m.erase(key);
        }
        if(m.size()==cap)
        {
            m.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        
        addnode(new node(key,value));
        m[key]=head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
